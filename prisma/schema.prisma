generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id            String      @id @default(cuid())
  name          String?
  last          String?
  username      String?     @unique
  role          String?
  password      String?     @db.Text
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  Department    Department? @relation(fields: [departmentId], references: [id])
  departmentId  Int?
  interests     Category[]  @relation("UserCategories")

  accounts Account[]
  sessions Session[]

  @@index([email], name: "idx_email")
  @@index([departmentId])
  @@map("users")
}

model Department {
  id         Int    @id @default(autoincrement())
  departname String
  User       User[]
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String   @db.VarChar(255)
  course      Course[]
  users       User[]   @relation("UserCategories")
}

model Course {
  id           String  @id @default(cuid())
  userId       String
  title        String  @db.VarChar(255)
  descriptions String? @db.VarChar(255)
  imageURL     String? @db.VarChar(255)
  isPublished  Boolean @default(false)

  categoryId String?
  Category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  attachments Attachments[]
  createAt    DateTime      @default(now())
  updateAt    DateTime      @updatedAt
  Chapter     Chapter[]

  @@index([categoryId])
}

model Attachments {
  id       String   @id @default(cuid())
  name     String
  url      String   @db.VarChar(255)
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  Course   Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String?

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(cuid())
  title       String
  description String? @db.VarChar(255)
  videoUrl    String? @db.VarChar(255)
  position    Int
  isPublished Boolean @default(false)

  muxData  MuxData?
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]
  createAt     DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(cuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String
  chapterId   String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
